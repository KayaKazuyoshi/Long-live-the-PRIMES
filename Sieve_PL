import math
import time
import matplotlib

class Primes:
    
#'''Checking whether there are prime numbers in the range set by the user.\nnum1, num2 are the numbers set\n.primes returns the list of primes.\nMake sure, that libraries: math, matplotlib, time are imported!'''
    
    def __init__(self, num1, num2):
        self.set_numbers(num1, num2)
        self.prime_selector()

    def set_numbers(self, num1, num2):
        '''Set new range to conduct the tests.'''
        if not (isinstance(num1, int) and isinstance(num2, int)):
            raise ValueError('Invalid variable(s) type(s): only int is acceptable.') #For primes are natural numbers, float type makes no sense here.
        if num1 < 0 or num2 < 0:
            raise ValueError('Invalid range: negative primes don\'t exist.')
        if not num2 > num1:
            variable = num1 + num2
            num1 = variable - num1
            num2 = variable - num2
            print(f'Attention: numbers were replaced.') #No need to punish the user for the obvoius mistyping :)
        else:
            self.num1 = num1
            self.num2 = num2
            self.primes = []

    def prime_selector(self):
        for i in range(self.num1, self.num2+1):
            if self.is_prime(i):
                self.primes.append(i)

    def is_prime(self, x):
        if x < 2: #Obviously, 0 and 1 are ex definitione neither prime nor composite numbers.
            return False
        elif x == 2: #The only even exception :)
            return True
        else:
            if x % 2 == 0: #No need to check other even numbers - they are all composite. Or... aren't they...?
                return False
            else:
                for i in range(3, math.ceil(x**0.5)+1, 2): #Here's the fun: to optimalize, only divisors lower than the square root of x are considered. Plus, the range starts with 3, as 2 has been already checked.
                    if x % i == 0: #One divisor is enough to tell that x is definitelly a composite number.
                        return False
                return True

    def showtime(self):
        '''Showing all prime numbers from the range.'''
        if not self.primes:
            return f'Sadly, there are no prime numbers in the range :('
        else:
            prime_string = map(str, self.primes)
            prime_string = ', '.join(prime_string)
            return f'Ladies and gentleman, here they are: {prime_string}. It makes a total number of {len(self.primes)} prime numbers.'

    def minmax(self):
        '''Showing the lowest and highest prime numbers from the range.'''
        return print(f'The lowest prime number from the range is {min(self.primes)}, \nwhereas the highest is {max(self.primes)}.') 

    def twins(self):
        '''Checking whether there are twin primes in the range.'''
        twins_list = []
        for i in self.primes:
            if i+2 in self.primes: #The simpliest way to check the twins, as their subtraction is always 2.
                twins_list.append((i, i+2))
        if not twins_list:
            return f'Sadly, there are no twin primes in the range :('
        else:
            self.twins = twins_list
            twin_string = map(str, twins_list)
            twin_string = ', '.join(twin_string)
            return f'Twin primes in the range are: {twin_string}.'

    def percent(self):
        '''Showing the percent of prime numbers compared to all numbers in the range.'''
        total_amount = self.num2 - self.num1 + 1
        return round((len(self.primes)/total_amount)*100, 4)#print(f'There are {len(self.primes)} prime numbers in the range of {total_amount} numbers: between {self.num1} and {self.num2}.\nTherefore, the probability of getting prime number in the range equals {round((len(self.primes)/total_amount)*100, 4)} %.')

    #def plot(self):
       # '''Presenting plots of density of prime numbers in the range.''' 

#Sample of what can we do with the class Primes:

var_list = ['first', 'second', 'third', 'forth', 'fifth', 'sixth', 'seventh', 'eighth', 'ninth', 'tenth']
var_numbers = []

for i in range(1, 1001, 100): #We're goint to check the percentage of prime numbers in the first 1000 natural numbers.
    var_numbers.append((i, i+99))

var_dict = {name: Primes(numbers[0], numbers[1]) for name, numbers in zip(var_list, var_numbers)} #Usage of dictionary comprehension: 'mapping' without map funtcion.
results = [[name, primes.percent()] for name, primes in var_dict.items()] #Usage of list comprehension: see above.

for i in results:
    print(f'In the {i[0]} hundred numbers there are {i[1]} % prime numbers.') #Presenting the final results.
